关于lxml的使用：
from lxml.etree import ElementTree
通过初始化的时候有两种方式 ：
1、pro = ElementTree(file=xml_path)
2、
pro = ElementTree()
pro.parse(xml_path)

注意此时的pro有find()、findall()、findtext()等方法，但是没有insert()、append()等方法，这些方法具体到某一个标签的才有，例如root=pro.getroot()，此时的root有insert方法。


def add_head(path):
    """
    使用os模块获取文件访问时间、修改时间、文件大小时等，当出现过长的文件名时
    会导致报错winerror，导致执行失败。在文件名发的开始加上“\\?\”头，能够避
    免该问题，并能够正确获取各种文件属性。
    """
    if platform.system() == "Windows":
        try:
            if path[0:4] == u"//?/":
                return path
        except Exception as e:
            print("add_head error:", e)
        before = u'//?/'
        path = before + path
    return path

redis做缓存如何更新数据：
https://blog.csdn.net/zzh920625/article/details/78027534

先更新数据库，删除缓存(出现数据不一致的情况：读操作再写操作之前，并且读操作再写操作后完成，基本不可能，以为写操作一般比读操作完成，推荐此种方式)


flask做前后端分离，解决跨域问题：
from flask_cors import CORS

# 解决跨域问题
CORS(app, resources={"/*": {"origins":"*"}})
